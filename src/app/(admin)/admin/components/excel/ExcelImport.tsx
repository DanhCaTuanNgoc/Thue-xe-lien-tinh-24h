'use client'

import React, { useState, useRef } from 'react'
import { readExcelFile, excelDataToCar, createExcelTemplate } from '../../../../../lib/utils/excelUtils' 
import { addCar } from '../../../../../lib/repositories/carApi'
import type { CarType } from '../../../../../lib/models/car_type'

interface ExcelImportProps {
  onImportComplete: () => void
  onError: (message: string) => void
  carTypes: CarType[] // Th√™m prop carTypes ƒë·ªÉ t√¨m ID t·ª´ t√™n
}

export default function ExcelImport({ onImportComplete, onError, carTypes }: ExcelImportProps) {
  const [isImporting, setIsImporting] = useState(false)
  const [importProgress, setImportProgress] = useState(0)
  const [totalRows, setTotalRows] = useState(0)
  const [currentRow, setCurrentRow] = useState(0)
  const [skipInvalidRows, setSkipInvalidRows] = useState(false)
  const fileInputRef = useRef<HTMLInputElement>(null)

  // H√†m t√¨m car type ID t·ª´ t√™n
  const findCarTypeId = (carTypeName: string): number | null => {
    const carType = carTypes.find(ct => ct.name.toLowerCase() === carTypeName.toLowerCase())
    return carType ? carType.id : null
  }

  const handleFileSelect = async (event: React.ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0]
    if (!file) return

    // Ki·ªÉm tra file type
    if (!file.name.endsWith('.xlsx') && !file.name.endsWith('.xls')) {
      onError('Vui l√≤ng ch·ªçn file Excel (.xlsx ho·∫∑c .xls)')
      return
    }

    setIsImporting(true)
    setImportProgress(0)
    setCurrentRow(0)

    try {
      // ƒê·ªçc file Excel - n·∫øu c√≥ l·ªói validation s·∫Ω throw error v√† d·ª´ng ngay
      const excelData = await readExcelFile(file)
      setTotalRows(excelData.length)

      if (excelData.length === 0) {
        onError('File Excel kh√¥ng c√≥ d·ªØ li·ªáu h·ª£p l·ªá')
        return
      }

      // Import d·ªØ li·ªáu
      let successCount = 0
      const errors: string[] = []
      const skippedRows: number[] = []

      for (let i = 0; i < excelData.length; i++) {
        try {
          const carData = excelData[i]
          
          // T√¨m car type ID t·ª´ t√™n
          const carTypeId = findCarTypeId(carData['lo·∫°i xe'])
          if (!carTypeId) {
            throw new Error(`Lo·∫°i xe "${carData['lo·∫°i xe']}" kh√¥ng t·ªìn t·∫°i trong h·ªá th·ªëng`)
          }
          
          // Chuy·ªÉn ƒë·ªïi Excel data sang Car object
          const car = excelDataToCar(carData)
          car.id_car_type = carTypeId // Set ID ƒë√£ t√¨m ƒë∆∞·ª£c
          
          // Th√™m xe v√†o database
          await addCar(car)
          
          successCount++
        } catch (error) {
          const errorMessage = error instanceof Error && error.message.includes('ƒë√£ t·ªìn t·∫°i') 
            ? `D√≤ng ${i + 2}: ${error.message}` 
            : `D√≤ng ${i + 2}: ${(error as Error).message}`
          errors.push(errorMessage)
          skippedRows.push(i + 2)
          console.error(errorMessage, error)
          
          // N·∫øu kh√¥ng b·ªè qua l·ªói th√¨ d·ª´ng ngay
          if (!skipInvalidRows) {
            const fullErrorMessage = `Import th·∫•t b·∫°i!\n\nL·ªói g·∫∑p ph·∫£i:\n${errorMessage}\n\nVui l√≤ng s·ª≠a l·ªói v√† th·ª≠ l·∫°i.`
            onError(fullErrorMessage)
            return
          }
        }

        // C·∫≠p nh·∫≠t progress
        setCurrentRow(i + 1)
        setImportProgress(((i + 1) / excelData.length) * 100)
      }

      // Ki·ªÉm tra k·∫øt qu·∫£
      if (errors.length > 0 && !skipInvalidRows) {
        // C√≥ l·ªói v√† kh√¥ng b·ªè qua - d·ª´ng v√† hi·ªÉn th·ªã t·∫•t c·∫£ l·ªói
        const errorMessage = `Import th·∫•t b·∫°i!\n\nC√°c l·ªói g·∫∑p ph·∫£i:\n${errors.join('\n')}\n\nVui l√≤ng s·ª≠a l·ªói v√† th·ª≠ l·∫°i.`
        onError(errorMessage)
        return
      }

      // Th√¥ng b√°o k·∫øt qu·∫£
      if (errors.length > 0) {
        // C√≥ l·ªói nh∆∞ng ƒë√£ b·ªè qua
        const resultMessage = `Import ho√†n t·∫•t!\n\n‚úÖ Th√†nh c√¥ng: ${successCount} xe\n‚ùå B·ªè qua: ${errors.length} d√≤ng c√≥ l·ªói\n\nC√°c d√≤ng b·ªã b·ªè qua: ${skippedRows.join(', ')}\n\nL·ªói chi ti·∫øt:\n${errors.join('\n')}`
        alert(resultMessage)
        onImportComplete()
      } else {
        // Th√†nh c√¥ng ho√†n to√†n
        onImportComplete()
        alert(`Import th√†nh c√¥ng ${successCount} xe!`)
      }

    } catch (error) {
      console.error('L·ªói import Excel:', error)
      onError('L·ªói ƒë·ªçc file Excel: ' + (error as Error).message)
    } finally {
      setIsImporting(false)
      setImportProgress(0)
      setCurrentRow(0)
      setTotalRows(0)
      
      // Reset file input
      if (fileInputRef.current) {
        fileInputRef.current.value = ''
      }
    }
  }

  const handleDownloadTemplate = () => {
    createExcelTemplate()
  }

  return (
    <div className="bg-white rounded-2xl shadow-xl p-6 border border-gray-200">
      <h3 className="text-xl font-semibold mb-4 text-slate-800 flex items-center gap-2">
        <span className="text-green-600">üìä</span>
        Import Excel
      </h3>

      <div className="space-y-4">
        {/* H∆∞·ªõng d·∫´n */}
        <div className="bg-blue-50 border border-blue-200 rounded-lg p-4">
          <h4 className="font-semibold text-blue-800 mb-2">üìã H∆∞·ªõng d·∫´n:</h4>
          <ul className="text-sm text-blue-700 space-y-1">
            <li>‚Ä¢ File Excel ph·∫£i c√≥ 6 c·ªôt: t·ªânh, ƒëi·ªÉm ƒë·∫øn, qu√£ng ƒë∆∞·ªùng, lo·∫°i xe, gi√°, th·ªùi gian</li>
            <li>‚Ä¢ D√≤ng ƒë·∫ßu ti√™n l√† header, d·ªØ li·ªáu b·∫Øt ƒë·∫ßu t·ª´ d√≤ng th·ª© 2</li>
            <li>‚Ä¢ Qu√£ng ƒë∆∞·ªùng, gi√°, th·ªùi gian ph·∫£i l√† s·ªë</li>
            <li>‚Ä¢ Lo·∫°i xe ph·∫£i kh·ªõp v·ªõi t√™n lo·∫°i xe trong h·ªá th·ªëng</li>
            <li>‚Ä¢ H·ªá th·ªëng s·∫Ω ki·ªÉm tra tr√πng l·∫∑p d·ª±a tr√™n t·ªânh, ƒëi·ªÉm ƒë·∫øn v√† lo·∫°i xe</li>
          </ul>
        </div>

        {/* Danh s√°ch lo·∫°i xe c√≥ s·∫µn */}
        <div className="bg-green-50 border border-green-200 rounded-lg p-4">
          <h4 className="font-semibold text-green-800 mb-2">üöô Lo·∫°i xe c√≥ s·∫µn trong h·ªá th·ªëng:</h4>
          <div className="text-sm text-green-700">
            {carTypes.length > 0 ? (
              <div className="flex flex-wrap gap-2">
                {carTypes.map(carType => (
                  <span key={carType.id} className="bg-green-100 px-2 py-1 rounded text-green-800">
                    {carType.name}
                  </span>
                ))}
              </div>
            ) : (
              <p className="text-yellow-600">Ch∆∞a c√≥ lo·∫°i xe n√†o trong h·ªá th·ªëng</p>
            )}
          </div>
        </div>

        {/* T√πy ch·ªçn x·ª≠ l√Ω l·ªói */}
        <div className="bg-yellow-50 border border-yellow-200 rounded-lg p-4">
          <div className="flex items-center gap-2">
            <input
              type="checkbox"
              id="skip-invalid-rows"
              checked={skipInvalidRows}
              onChange={(e) => setSkipInvalidRows(e.target.checked)}
              className="w-4 h-4 text-blue-600 bg-gray-100 border-gray-300 rounded focus:ring-blue-500"
            />
            <label htmlFor="skip-invalid-rows" className="text-sm font-medium text-yellow-800">
              B·ªè qua c√°c d√≤ng c√≥ l·ªói v√† ti·∫øp t·ª•c import
            </label>
          </div>
          <p className="text-xs text-yellow-700 mt-1">
            Khi b·∫≠t: H·ªá th·ªëng s·∫Ω b·ªè qua c√°c d√≤ng c√≥ l·ªói v√† ch·ªâ import c√°c d√≤ng h·ª£p l·ªá
          </p>
        </div>

        {/* Download template */}
        <div className="flex gap-3">
          <button
            type="button"
            onClick={handleDownloadTemplate}
            className="bg-green-600 text-white rounded-lg px-4 py-2 font-semibold hover:bg-green-700 transition-colors flex items-center gap-2"
          >
            üì• T·∫£i template Excel
          </button>
        </div>

        {/* File input */}
        <div className="border-2 border-dashed border-slate-300 rounded-lg p-6 text-center hover:border-blue-400 transition-colors">
          <input
            ref={fileInputRef}
            type="file"
            accept=".xlsx,.xls"
            onChange={handleFileSelect}
            disabled={isImporting}
            className="hidden"
            id="excel-file-input"
          />
          <label
            htmlFor="excel-file-input"
            className={`cursor-pointer flex flex-col items-center gap-2 ${
              isImporting ? 'opacity-50 cursor-not-allowed' : ''
            }`}
          >
            <div className="text-4xl">üìÅ</div>
            <div className="text-slate-600">
              {isImporting ? 'ƒêang import...' : 'Click ƒë·ªÉ ch·ªçn file Excel'}
            </div>
            <div className="text-sm text-slate-500">
              H·ªó tr·ª£ .xlsx v√† .xls
            </div>
          </label>
        </div>

        {/* Progress bar */}
        {isImporting && (
          <div className="space-y-2">
            <div className="flex justify-between text-sm text-slate-600">
              <span>ƒêang import...</span>
              <span>{currentRow}/{totalRows} d√≤ng</span>
            </div>
            <div className="w-full bg-slate-200 rounded-full h-2">
              <div
                className="bg-blue-600 h-2 rounded-full transition-all duration-300"
                style={{ width: `${importProgress}%` }}
              ></div>
            </div>
            <div className="text-center text-sm text-slate-500">
              {Math.round(importProgress)}% ho√†n th√†nh
            </div>
          </div>
        )}
      </div>
    </div>
  )
} 